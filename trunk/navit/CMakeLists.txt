project(navit)

cmake_minimum_required(VERSION 2.6)
cmake_policy(VERSION 2.6)

set(PACKAGE_VERSION "0.5.0")
set(PACKAGE_NAME "navit-svn")
set(PACKAGE "navit")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")
include("${PROJECT_SOURCE_DIR}/cmake/navit_macros.cmake")

IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel." FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

### Detect environment
INCLUDE (CPack)
INCLUDE (CheckIncludeFiles)
INCLUDE (CheckLibraryExists)
find_package(Glib)
find_package(ZLIB)
find_package(Freetype)
find_package(SDL)
find_package(SDL_ttf)
find_package(SDL_image)
find_package(OpenGL)
find_package(GTK2 2.6 COMPONENTS gtk)
find_package(Gettext)
find_package(PNG)
#Qt detection
SET(QT_USE_QTSVG TRUE)
SET(QT_USE_QTXML TRUE)
SET(QT_USE_QTDECLARATIVE TRUE)
find_package(Qt4 COMPONENTS QtCore QtGui QtXml QtDeclarative QtSvg OPTIONAL)
#pkg-config based detection
find_package(PkgConfig)
if(PKG_CONFIG_FOUND)
  pkg_check_modules(QUESOGLC quesoglc)
  pkg_check_modules(LIBGPSD libgpsd)
  pkg_check_modules(DBUS_GLIB dbus-glib-1)
endif(PKG_CONFIG_FOUND)
#Simple checks
CHECK_INCLUDE_FILES(wordexp.h HAVE_WORDEXP)
CHECK_INCLUDE_FILES(stdint.h HAVE_STDINT_H)
CHECK_LIBRARY_EXISTS(gypsy gypsy_control_get_default "" GYPSY_FOUND)
CHECK_INCLUDE_FILES(libspeechd.h HAVE_LIBSPEECHD)

### Configure build
#Required libraries, supplied with navit
if (Glib_FOUND)
    set(HAVE_GLIB 1)
    include_directories(${Glib_INCLUDE_DIRS})
    list(APPEND NAVIT_LIBS ${Glib_LIBRARIES})
else(Glib_FOUND)
    add_plugin(support/glib "Glib not found" TRUE)
endif(Glib_FOUND)
if(ZLIB_FOUND)
   set(HAVE_ZLIB 1)
   include_directories(${ZLIB_INCLUDE_DIRS})
   list(APPEND NAVIT_LIBS ${ZLIB_LIBRARIES})
else(ZLIB_FOUND)
   message(STATUS "using internal zlib")
   add_plugin(support/zlib "native zlib missing" TRUE)
endif(ZLIB_FOUND)
if(PNG_FOUND)
   set(HAVE_PNG 1)
   include_directories(${PNG_INCLUDE_DIRS})
   list(APPEND NAVIT_LIBS ${PNG_LIBRARY})
else(PNG_FOUND)
   message(STATUS "using internal libpng")
   add_plugin(support/libpng "native libpng missing" TRUE)
endif(PNG_FOUND)
if (NOT HAVE_WORDEXP)
  message(STATUS "wordexp.h not found. use internal wordexp")
  add_plugin(support/wordexp "native wordexp missing" TRUE)
endif()

if(FREETYPE_FOUND)
   include_directories(${FREETYPE_INCLUDE_DIRS})
   list(APPEND NAVIT_LIBS ${FREETYPE_LIBRARY})
   #add_module(font/freetype "freetype found" TRUE)
else(FREETYPE_FOUND)
    MESSAGE("No freetype library found, graphics modules may not be available")
    add_module(graphics/android "FreeType library not found" FALSE)
    add_module(graphics/gd "FreeType library not found" FALSE)
    add_module(graphics/gtk_drawing_area "FreeType library not found" FALSE)
    add_module(graphics/opengl "FreeType library not found" FALSE)
    add_module(graphics/sdl "FreeType library not found" FALSE)
endif(FREETYPE_FOUND)

if (QT_FOUND)
   if (QT_QTCORE_FOUND AND QT_QTGUI_FOUND AND FREETYPE_FOUND)
      add_module(graphics/qt_qpainter "Qt libraries found" TRUE)
	
      if (QT_QTDECLARATIVE_FOUND AND QT_QTXML_FOUND)
          add_module(gui/qml "Qt Declarative found" TRUE)
      endif()
      
      if (QT_QTSVG_FOUND)
         set(HAVE_QT_SVG 1)
      elseif( USE_SVG AND graphics/qt_qpainter)
         message( WARNING "QT compiled without SVG support")
      endif()
      
      include(${QT_USE_FILE})
      list(APPEND NAVIT_LIBS ${QT_LIBRARIES})
   endif()
endif(QT_FOUND)

if(GTK2_FOUND)
    include_directories(${GTK2_INCLUDE_DIRS})
    list(APPEND NAVIT_LIBS ${GTK2_LIBRARIES})
    set(HAVE_GTK2 1)
    add_module(gui/gtk "GTK libs found" TRUE)
    if(FREETYPE_FOUND)
        add_module(graphics/gtk_drawing_area "GTK libs found" TRUE)
    endif(FREETYPE_FOUND)
endif(GTK2_FOUND)

if (QUESOGLC_FOUND AND FREETYPE_FOUND)
  if (OPENGL_FOUND AND OPENGL_GLU_FOUND AND OPENGL_INCLUDE_DIR)
     message (STATUS "opengl found: ${OPENGL_gl_LIBRARY}")
     include_directories(${OPENGL_INCLUDE_DIR})
     add_module(graphics/opengl "Found OpenGL and Quesoglc" TRUE)
  else()
     message (STATUS "opengl not found")
  endif()
else()
  message (STATUS "no glc implementation found. Install Quesoglc for OpenGL support")
endif(QUESOGLC_FOUND AND FREETYPE_FOUND)

if(SDL_FOUND AND SDLIMAGE_FOUND AND FREE_TYPE_FOUND)
    add_module(graphics/sdl "SDL/SDL_image libs found" TRUE)
    list(APPEND NAVIT_LIBS ${SDL_LIBRARY} ${SDLIMAGE_LIBRARY})
      set(SDL_IMAGE 1)
    if(SDLTTF_FOUND)
        set(SDL_TTF 1)
        list(APPEND NAVIT_LIBS ${SDLTTF_LIBRARY})
    endif(SDLTTF_FOUND)
endif(SDL_FOUND AND SDLIMAGE_FOUND AND FREE_TYPE_FOUND)

if (HAVE_LIBGPS)
   add_module(vehicle/gpsd "gpsd lib found" TRUE)
endif(HAVE_LIBGPS)

if (GYPSY_FOUND)
   add_module(vehicle/gypsy "gypsy lib found" TRUE)
endif(GYPSY_FOUND)   

if(DBUS_GLIB_FOUND)
    include_directories(${DBUS_GLIB_INCLUDE_DIRS})
    list(APPEND NAVIT_LIBS ${DBUS_GLIB_LIBRARIES})
    add_module(binding/dbus "dbus-glib-1 found" TRUE)
    add_module(speech/dbus "dbus-glib-1 found" TRUE)
    add_module(vehicle/gpsd_dbus "dbus-glib-1 found" TRUE)
endif()

if (HAVE_LIBSPEECHD)
    add_module(speech/speech_dispatcher "speech_dispatcher lib found" TRUE)
endif(HAVE_LIBSPEECHD)

#Independent modules
add_module(graphics/null "Default" TRUE)
add_module(osd/core "Default" TRUE)
add_module(vehicle/demo "Default" TRUE)
add_module(vehicle/file "Default" TRUE)
add_module(vehicle/null "Default" FALSE)
add_module(gui/internal "Default" TRUE)
add_module(map/binfile "Default" TRUE)
add_module(map/filter "Default" TRUE)
add_module(map/shapefile "Default" TRUE)
add_module(map/textfile "Default" TRUE)
add_module(speech/cmdline "Default" TRUE)

#Modules without test yet
add_module(map/mg "Default" FALSE)
add_module(plugin/pedestrian "Default" FALSE)
add_module(speech/android "Default" FALSE)
add_module(speech/espeak "Default" FALSE)
add_plugin(support/espeak "Default" FALSE)
add_plugin(support/ezxml "Default" FALSE)
add_module(vehicle/android "Default" FALSE)
add_module(vehicle/iphone "Default" FALSE)
add_module(vehicle/maemo "Default" FALSE)
add_module(vehicle/wince "Default" FALSE)

# other features
set(USE_PLUGINS TRUE)
set(USE_ROUTING TRUE)
set(USE_SVG TRUE)
set(SVG2PNG TRUE)
IF(NOT svg2png_scaling)
   set(svg2png_scaling 32 48 96)
ENDIF()
IF(NOT svg2png_scaling_flag)
   set(svg2png_scaling_flag 32 48 96)
ENDIF()
IF(NOT svg2png_scaling_nav)
   set(svg2png_scaling_nav 32 48 96)
ENDIF()
   
set(DBUS_USE_SYSTEM_BUS FALSE)
set(BUILD_MAPTOOL TRUE)

# install path
set(BIN_DIR bin)
set(SHARE_DIR share/navit)
set(LOCALE_DIR share)
set(IMAGE_DIR share/navit/xpm)
set(LIB_DIR lib)

### Platform specific settings
if(WIN32 OR WINCE)
    SET(CMAKE_EXECUTABLE_SUFFIX ".exe")
    add_module(graphics/win32 "Windows detected" TRUE)
    add_module(support/win32 "Windows detected" TRUE)

    set_with_reason(support/ezxml "Windows detected" TRUE)
    set_with_reason(speech/espeak "Windows detected" TRUE)
    set_with_reason(support/espeak "Windows detected" TRUE)

    # vehicle_file is broken for windows. use vehicle_wince instead
    # whicle_wince isn't buildable on non-CE windows ssytems
    set_with_reason(vehicle/file "wind32: currently broken" FALSE)

    # plugins currently not supported on windows
    set_with_reason(USE_PLUGINS "win32: currently not supported" FALSE)

    set(HAVE_API_WIN32_BASE 1)
   
    # Image stuff
    if(NOT graphics/qt_qpainter)
        set_with_reason(USE_SVG "win32: SVGs currently not supported" FALSE)
    else(NOT graphics/qt_qpainter)
	MESSAGE(STATUS "win32: SVGs may not be supported by every available graphics")
    endif(NOT graphics/qt_qpainter)

   set(BIN_DIR ./)
   set(SHARE_DIR ./)
   set(LOCALE_DIR ./)
   set(IMAGE_DIR xpm)


    if(HAVE_GTK2 AND NOT MSVC)
        #GTK requires special compile flags
	add_definitions("-mms-bitfields")
    endif(HAVE_GTK2 AND NOT MSVC)
    if(MSVC AND support/espeak)
	add_definitions(-DPLATFORM_WINDOWS)
    endif(MSVC AND support/espeak)
endif()
if (WIN32) 
    set(HAVE_API_WIN32 1)
    list(APPEND NAVIT_LIBS winmm)
endif()
if(WINCE)
    add_plugin(support/libc "wince detected" TRUE)
    add_plugin(intl_cmake "wince detected" TRUE)
    set(HAVE_API_WIN32_CE 1)
    set(BUILD_MAPTOOL FALSE)
    set(ENABLE_NLS TRUE)
endif()


foreach(PLUMO ${ALL_PLUGINS} ${ALL_MODULES} USE_PLUGINS USE_ROUTING BUILD_MAPTOOL USE_SVG SVG2PNG DBUS_USE_SYSTEM_BUS)
   set(OLDVALUE ${${PLUMO}})
   OPTION(${PLUMO} "Enable/Disable module/plugin/support" ${${PLUMO}})
   if ( NOT ${OLDVALUE} STREQUAL ${${PLUMO}} )
      set(${PLUMO}_REASON "User defined")
   endif()
endforeach()


# SVG2PNG conversion
set (IMAGE_CONVERTER_PROGS rsvg-convert ksvgtopng ksvgtopng4)
find_program(IMAGE_CONVERTER NAMES ${IMAGE_CONVERTER_PROGS})
if (SVG2PNG)
   message(STATUS ${IMAGE_CONVERTER})
   if (NOT IMAGE_CONVERTER)
      message(WARNING "No SVG2PNG converter found. Please install one of the following tools: ${IMAGE_CONVERTER_PROGS}")
      set_with_reason(SVG2PNG "no converter found" FALSE)
   endif(NOT IMAGE_CONVERTER)
endif(SVG2PNG)

# Plugins
if(USE_PLUGINS)
   set(MODULE_BUILD_TYPE "MODULE")
   list(APPEND NAVIT_COMPILE_FLAGS -fPIC)
   message(STATUS "Use plugins: ${MODULE_BUILD_TYPE}")
else()
   set(MODULE_BUILD_TYPE "STATIC")
endif(USE_PLUGINS)

CHECK_INCLUDE_FILES (malloc.h HAVE_MALLOC_H)
CHECK_INCLUDE_FILES ("sys/param.h;sys/mount.h" HAVE_SYS_MOUNT_H)
#CHECK_INCLUDE_FILES (windows.h HAVE_API_WIN32_BASE)
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h)

add_subdirectory (navit)
add_subdirectory (man)

if (GETTEXT_FOUND)
   execute_process(COMMAND echo "<test/>" COMMAND xgettext -L glade - RESULT_VARIABLE GETTEXT_RET)
   if ("${GETTEXT_RET}" STREQUAL "0")
       set(XGETTEXT_GLADE TRUE)
   else()
       set(XGETTEXT_GLADE FALSE)
   endif()
   add_subdirectory (po)
endif(GETTEXT_FOUND)

install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/locale DESTINATION ${LOCALE_DIR})
 
