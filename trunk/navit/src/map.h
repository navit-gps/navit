/*
 * This file was generated by orbit-idl-2 - DO NOT EDIT!
 */

#ifndef map_H
#define map_H 1
#include <glib.h>
#define ORBIT_IDL_SERIAL 20
#include <orbit/orbit-types.h>

#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#if !defined(_PointObj_defined)
#define _PointObj_defined 1
   typedef struct PointObj_type PointObj;
   struct PointObj_type
   {
      CORBA_float lng;
      CORBA_float lat;
      CORBA_float height;
   };

#if !defined(TC_IMPL_TC_PointObj_0)
#define TC_IMPL_TC_PointObj_0 'm'
#define TC_IMPL_TC_PointObj_1 'a'
#define TC_IMPL_TC_PointObj_2 'p'
#ifdef ORBIT_IDL_C_IMODULE_map
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_PointObj_struct;
#define TC_PointObj ((CORBA_TypeCode)&TC_PointObj_struct)
#endif
#define PointObj__alloc() ((PointObj *)ORBit_small_alloc (TC_PointObj))
#define PointObj__freekids(m,d) ORBit_small_freekids (TC_PointObj,(m),(d))
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_PointObj)
#define ORBIT_DECL_CORBA_sequence_PointObj 1
#define ORBIT_IMPL_CORBA_sequence_PointObj_0 'm'
#define ORBIT_IMPL_CORBA_sequence_PointObj_1 'a'
#define ORBIT_IMPL_CORBA_sequence_PointObj_2 'p'
#if !defined(_CORBA_sequence_PointObj_defined)
#define _CORBA_sequence_PointObj_defined 1
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      PointObj *_buffer;
      CORBA_boolean _release;
   } CORBA_sequence_PointObj;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_PointObj_0)
#define TC_IMPL_TC_CORBA_sequence_PointObj_0 'm'
#define TC_IMPL_TC_CORBA_sequence_PointObj_1 'a'
#define TC_IMPL_TC_CORBA_sequence_PointObj_2 'p'
#ifdef ORBIT_IDL_C_IMODULE_map
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_CORBA_sequence_PointObj_struct;
#define TC_CORBA_sequence_PointObj ((CORBA_TypeCode)&TC_CORBA_sequence_PointObj_struct)
#endif
#define CORBA_sequence_PointObj__alloc() ((CORBA_sequence_PointObj *)ORBit_small_alloc (TC_CORBA_sequence_PointObj))
#define CORBA_sequence_PointObj__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_PointObj,(m),(d))
#define CORBA_sequence_PointObj_allocbuf(l) ((PointObj*)ORBit_small_allocbuf (TC_CORBA_sequence_PointObj, (l)))
#define CORBA_sequence_PointObj_allocbuf(l) ((PointObj*)ORBit_small_allocbuf (TC_CORBA_sequence_PointObj, (l)))
#endif
#if !defined(_PointObjSequence_defined)
#define _PointObjSequence_defined 1
   typedef CORBA_sequence_PointObj PointObjSequence;
#define PointObjSequence_marshal(x,y,z) CORBA_sequence_PointObj_marshal((x),(y),(z))
#define PointObjSequence_demarshal(x,y,z,i) CORBA_sequence_PointObj_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_PointObjSequence_0)
#define TC_IMPL_TC_PointObjSequence_0 'm'
#define TC_IMPL_TC_PointObjSequence_1 'a'
#define TC_IMPL_TC_PointObjSequence_2 'p'
#ifdef ORBIT_IDL_C_IMODULE_map
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_PointObjSequence_struct;
#define TC_PointObjSequence ((CORBA_TypeCode)&TC_PointObjSequence_struct)
#endif
#define PointObjSequence__alloc() ((PointObjSequence *)ORBit_small_alloc (TC_CORBA_sequence_PointObj))
#define PointObjSequence__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_PointObj,(m),(d))
#define PointObjSequence_allocbuf(l) ((PointObj*)ORBit_small_allocbuf (TC_CORBA_sequence_PointObj, (l)))
#endif
#if !defined(ORBIT_DECL_Mappel) && !defined(_Mappel_defined)
#define ORBIT_DECL_Mappel 1
#define _Mappel_defined 1
#define Mappel__freekids CORBA_Object__freekids
   typedef CORBA_Object Mappel;
   extern CORBA_unsigned_long Mappel__classid;
#if !defined(TC_IMPL_TC_Mappel_0)
#define TC_IMPL_TC_Mappel_0 'm'
#define TC_IMPL_TC_Mappel_1 'a'
#define TC_IMPL_TC_Mappel_2 'p'
#ifdef ORBIT_IDL_C_IMODULE_map
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Mappel_struct;
#define TC_Mappel ((CORBA_TypeCode)&TC_Mappel_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Map) && !defined(_Map_defined)
#define ORBIT_DECL_Map 1
#define _Map_defined 1
#define Map__freekids CORBA_Object__freekids
   typedef CORBA_Object Map;
   extern CORBA_unsigned_long Map__classid;
#if !defined(TC_IMPL_TC_Map_0)
#define TC_IMPL_TC_Map_0 'm'
#define TC_IMPL_TC_Map_1 'a'
#define TC_IMPL_TC_Map_2 'p'
#ifdef ORBIT_IDL_C_IMODULE_map
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Map_struct;
#define TC_Map ((CORBA_TypeCode)&TC_Map_struct)
#endif
#endif

/** POA structures **/
#ifndef _defined_POA_Mappel
#define _defined_POA_Mappel 1
   typedef struct
   {
      void *_private;
      void (*Test) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Mappel__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Mappel__epv *Mappel_epv;
   } POA_Mappel__vepv;
   typedef struct
   {
      void *_private;
      POA_Mappel__vepv *vepv;
   } POA_Mappel;
   extern void POA_Mappel__init(PortableServer_Servant servant,
				CORBA_Environment * ev);
   extern void POA_Mappel__fini(PortableServer_Servant servant,
				CORBA_Environment * ev);
#endif				/* _defined_POA_Mappel */
#ifndef _defined_POA_Map
#define _defined_POA_Map 1
   typedef struct
   {
      void *_private;
       Map(*mapString) (PortableServer_Servant _servant,
			const CORBA_char * astring, CORBA_double * anum,
			CORBA_Environment * ev);
      void (*doNothing) (PortableServer_Servant _servant,
			 CORBA_Environment * ev);
      void (*doOneWay) (PortableServer_Servant _servant,
			const CORBA_char * ignore, CORBA_Environment * ev);
      void (*PlaceFlag) (PortableServer_Servant _servant,
			 CORBA_Environment * ev);
       PointObj(*PointFromCoord) (PortableServer_Servant _servant,
				  const CORBA_char * coord,
				  CORBA_Environment * ev);
      void (*View) (PortableServer_Servant _servant, const PointObj * where,
		    CORBA_Environment * ev);
      void (*ViewAll) (PortableServer_Servant _servant,
		       const PointObjSequence * where,
		       CORBA_Environment * ev);
      void (*Route) (PortableServer_Servant _servant, const PointObj * src,
		     const PointObj * dst, CORBA_Environment * ev);
       Mappel(*Get) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Map__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Map__epv *Map_epv;
   } POA_Map__vepv;
   typedef struct
   {
      void *_private;
      POA_Map__vepv *vepv;
   } POA_Map;
   extern void POA_Map__init(PortableServer_Servant servant,
			     CORBA_Environment * ev);
   extern void POA_Map__fini(PortableServer_Servant servant,
			     CORBA_Environment * ev);
#endif				/* _defined_POA_Map */

/** skel prototypes **/
   void _ORBIT_skel_small_Mappel_Test(POA_Mappel * _ORBIT_servant,
				      gpointer _ORBIT_retval,
				      gpointer * _ORBIT_args,
				      CORBA_Context ctx,
				      CORBA_Environment * ev,
				      void (*_impl_Test)
				      (PortableServer_Servant _servant,
				       CORBA_Environment * ev));
   void _ORBIT_skel_small_Map_mapString(POA_Map * _ORBIT_servant,
					gpointer _ORBIT_retval,
					gpointer * _ORBIT_args,
					CORBA_Context ctx,
					CORBA_Environment * ev,
					Map(*_impl_mapString)
					(PortableServer_Servant _servant,
					 const CORBA_char * astring,
					 CORBA_double * anum,
					 CORBA_Environment * ev));
   void _ORBIT_skel_small_Map_doNothing(POA_Map * _ORBIT_servant,
					gpointer _ORBIT_retval,
					gpointer * _ORBIT_args,
					CORBA_Context ctx,
					CORBA_Environment * ev,
					void (*_impl_doNothing)
					(PortableServer_Servant _servant,
					 CORBA_Environment * ev));
   void _ORBIT_skel_small_Map_doOneWay(POA_Map * _ORBIT_servant,
				       gpointer _ORBIT_retval,
				       gpointer * _ORBIT_args,
				       CORBA_Context ctx,
				       CORBA_Environment * ev,
				       void (*_impl_doOneWay)
				       (PortableServer_Servant _servant,
					const CORBA_char * ignore,
					CORBA_Environment * ev));
   void _ORBIT_skel_small_Map_PlaceFlag(POA_Map * _ORBIT_servant,
					gpointer _ORBIT_retval,
					gpointer * _ORBIT_args,
					CORBA_Context ctx,
					CORBA_Environment * ev,
					void (*_impl_PlaceFlag)
					(PortableServer_Servant _servant,
					 CORBA_Environment * ev));
   void _ORBIT_skel_small_Map_PointFromCoord(POA_Map * _ORBIT_servant,
					     gpointer _ORBIT_retval,
					     gpointer * _ORBIT_args,
					     CORBA_Context ctx,
					     CORBA_Environment * ev,
					     PointObj(*_impl_PointFromCoord)
					     (PortableServer_Servant _servant,
					      const CORBA_char * coord,
					      CORBA_Environment * ev));
   void _ORBIT_skel_small_Map_View(POA_Map * _ORBIT_servant,
				   gpointer _ORBIT_retval,
				   gpointer * _ORBIT_args, CORBA_Context ctx,
				   CORBA_Environment * ev,
				   void (*_impl_View) (PortableServer_Servant
						       _servant,
						       const PointObj * where,
						       CORBA_Environment *
						       ev));
   void _ORBIT_skel_small_Map_ViewAll(POA_Map * _ORBIT_servant,
				      gpointer _ORBIT_retval,
				      gpointer * _ORBIT_args,
				      CORBA_Context ctx,
				      CORBA_Environment * ev,
				      void (*_impl_ViewAll)
				      (PortableServer_Servant _servant,
				       const PointObjSequence * where,
				       CORBA_Environment * ev));
   void _ORBIT_skel_small_Map_Route(POA_Map * _ORBIT_servant,
				    gpointer _ORBIT_retval,
				    gpointer * _ORBIT_args, CORBA_Context ctx,
				    CORBA_Environment * ev,
				    void (*_impl_Route)
				    (PortableServer_Servant _servant,
				     const PointObj * src,
				     const PointObj * dst,
				     CORBA_Environment * ev));
   void _ORBIT_skel_small_Map_Get(POA_Map * _ORBIT_servant,
				  gpointer _ORBIT_retval,
				  gpointer * _ORBIT_args, CORBA_Context ctx,
				  CORBA_Environment * ev,
				  Mappel(*_impl_Get) (PortableServer_Servant
						      _servant,
						      CORBA_Environment *
						      ev));

/** stub prototypes **/
   void Mappel_Test(Mappel _obj, CORBA_Environment * ev);
   Map Map_mapString(Map _obj, const CORBA_char * astring,
		     CORBA_double * anum, CORBA_Environment * ev);
   void Map_doNothing(Map _obj, CORBA_Environment * ev);
   void Map_doOneWay(Map _obj, const CORBA_char * ignore,
		     CORBA_Environment * ev);
   void Map_PlaceFlag(Map _obj, CORBA_Environment * ev);
   PointObj Map_PointFromCoord(Map _obj, const CORBA_char * coord,
			       CORBA_Environment * ev);
   void Map_View(Map _obj, const PointObj * where, CORBA_Environment * ev);
   void Map_ViewAll(Map _obj, const PointObjSequence * where,
		    CORBA_Environment * ev);
   void Map_Route(Map _obj, const PointObj * src, const PointObj * dst,
		  CORBA_Environment * ev);
   Mappel Map_Get(Map _obj, CORBA_Environment * ev);
#include <orbit/orb-core/orbit-interface.h>

#ifdef ORBIT_IDL_C_IMODULE_map
   static
#else
   extern
#endif
   ORBit_IInterface Mappel__iinterface;
#define Mappel_IMETHODS_LEN 1
#ifdef ORBIT_IDL_C_IMODULE_map
   static
#else
   extern
#endif
   ORBit_IMethod Mappel__imethods[Mappel_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_map
   static
#else
   extern
#endif
   ORBit_IInterface Map__iinterface;
#define Map_IMETHODS_LEN 9
#ifdef ORBIT_IDL_C_IMODULE_map
   static
#else
   extern
#endif
   ORBit_IMethod Map__imethods[Map_IMETHODS_LEN];
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#ifndef EXCLUDE_ORBIT_H
#include <orbit/orbit.h>

#endif				/* EXCLUDE_ORBIT_H */
#endif
#undef ORBIT_IDL_SERIAL
